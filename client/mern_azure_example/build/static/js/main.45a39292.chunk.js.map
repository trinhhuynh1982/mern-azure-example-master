{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createThought","thought","prompt","axios","post","then","res","setState","thoughts","concat","toConsumableArray","state","data","newThought","catch","err","alert","JSON","stringify","deleteThoughts","window","confirm","delete","seedThoughts","get","_this2","react_default","a","createElement","className","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","key","_id","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSA4EeA,cAvEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqCRQ,cAAgB,WACd,IAAMC,EAAUC,OAAO,wBAClBD,GACLE,IACGC,KAAK,uBAAwB,CAAEH,YAC/BI,KAAK,SAAAC,GAAG,OAAIb,EAAKc,SAAS,CAAEC,SAAQ,GAAAC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMD,EAAKkB,MAAMH,UAAjB,CAA2BF,EAAIM,KAAKC,iBACxEC,MAAM,SAAAC,GAAG,OAAIC,MAAK,6BAAAP,OAA8BQ,KAAKC,UAAUH,QA5CjDtB,EA+CnB0B,eAAiB,WACEC,OAAOC,QAAQ,yBAEhClB,IACGmB,OAAO,kBACPjB,KAAK,SAAAC,GAAG,OAAIb,EAAKc,SAAS,CAAEC,SAAU,OACtCM,MAAM,SAAAC,GAAG,OAAIC,MAAK,kCAAAP,OAAmCQ,KAAKC,UAAUH,QArDtDtB,EAwDnB8B,aAAe,WACEH,OAAOC,QAAQ,qCAE9BlB,IACGC,KAAK,qBAAsB,IAC3BC,KAAK,WACJF,IACGqB,IAAI,kBACJnB,KAAK,SAAAC,GAAG,OAAIb,EAAKc,SAAS,CAAEC,SAAUF,EAAIM,SAC1CE,MAAME,SAEVF,MAAME,QAjETvB,EAAKkB,MAAQ,CACXH,SAAU,IAHKf,mFAOC,IAAAgC,EAAA7B,KAClBO,IACGqB,IAAI,kBACJnB,KAAK,SAAAC,GAAG,OAAImB,EAAKlB,SAAS,CAAEC,SAAUF,EAAIM,SAC1CE,MAAME,wCAGF,IACCR,EAAaZ,KAAKe,MAAlBH,SAER,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQE,QAASlC,KAAKI,eAAtB,kBACA0B,EAAAC,EAAAC,cAAA,UAAQE,QAASlC,KAAKuB,gBAAtB,mBACAO,EAAAC,EAAAC,cAAA,UAAQE,QAASlC,KAAK2B,cAAtB,iBAEAG,EAAAC,EAAAC,cAAA,UACGpB,EAASuB,IAAI,SAAAC,GAAY,OACxBN,EAAAC,EAAAC,cAAA,MACEK,MAAO,CAAEC,cAAe,OAAQC,OAAQ,OAAQC,aAAc,mBAC9DC,IAAKL,EAAaM,KAEjBN,EAAa/B,oBA/BVsC,aCQEC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.45a39292.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/thoughts/')\n      .then(res => this.setState({ thoughts: res.data }))\n      .catch(alert);\n  }\n\n  render() {\n    const { thoughts } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* Buttons to interact with API */}\n        <button onClick={this.createThought}>Create Thought</button>\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\n        {/* List of thoughts in Cosmos DB */}\n        <ul>\n          {thoughts.map(thoughtModel => (\n            <li\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\n              key={thoughtModel._id}\n            >\n              {thoughtModel.thought}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  createThought = () => {\n    const thought = prompt('Enter your thought: ');\n    if (!thought) return;\n    axios\n      .post('/api/thoughts/create', { thought })\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\n  };\n\n  deleteThoughts = () => {\n    const doDelete = window.confirm('Delete all Thoughts?');\n    if (!doDelete) return;\n    axios\n      .delete('/api/thoughts/')\n      .then(res => this.setState({ thoughts: [] }))\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\n  };\n\n  seedThoughts = () => {\n    const doSeed = window.confirm('Do you want to seed random data?');\n    if (!doSeed) return;\n    axios\n      .post('/api/thoughts/seed', {})\n      .then(() => {\n        axios\n          .get('/api/thoughts/')\n          .then(res => this.setState({ thoughts: res.data }))\n          .catch(alert);\n      })\n      .catch(alert);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}